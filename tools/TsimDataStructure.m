function varargout = TsimDataStructure(varargin)
% TSIMDATASTRUCTURE Return data structure for trEPR TSim module, or
% test compliance of given structure with the data structure of the module.
%
% Usage
%   structure = TsimDataStructure;
%   structure = TsimDataStructure(<command>)
%   [missingFields,wrongType] = TsimDataStructure(<command>,structure)
%
%   <command> - string 
%               one of 'structure', 'model' or 'check'
%               'structure' - return (empty) trEPR toolbox data structure
%               'model' -     return trEPR toolbox data structure with
%                             field types as values
%               'check' -     check given structure for compliance with the
%                             toolbox data structure
%
%   structure - struct
%               either empty trEPR toolbox data structure or 
%               trEPR toolbox data structure with field types as values
%
%   missingFields - cell array
%                   List of fields missing in the structure with respect to
%                   the toolbox data structure
%
%   wrongType -     cell array
%                   List of fields in structure having the wrong type with
%                   respect to the toolbox data structure
%
% See also TREPRLOAD, TREPRDATASTRUCTURE.

% Copyright (c) 2013-15, Deborah Meyer, Till Biskup
% 2015-05-29

if ~nargin && ~nargout
    help TsimDataStructure
    return;
end

% Create empty trEPR toolbox data structure
dataStructure = struct();
dataStructure.calculated = [];
dataStructure.TSim = struct(...       
    'sim',struct(...
        'simpar',struct(...
                 ), ... 
        'routine','', ...        
        'EasySpin', struct(... 
            'Sys', struct(...
                'S',[],...
                'g',[],...
                'D',[],...
                'lw',[],...
                'DStrain',[],...
                'gStrain',[]...
                ), ...
             'Exp', struct(...
                'mwFreq',[],...
                'Range',[],...
                'nPoints',[],...
                'Temperature',[],...
                'Ordering',[]...
                ),...
            'Opt',struct(...
                'nKnots',[],...
                'Harmonic',[]...
                )... 
        ) ...
        ), ...
    'fit', struct(...
        'fitpar',struct(...
                 ),...
        'routine','', ...
        'initialvalue',[], ...
        'finalvalue',[], ...        
        'lb',[], ...
        'ub',[], ...
        'fitcut',struct(...
             'cutpoints',[], ...
             'mutilatedData',[],...
             'mutilatedField',[],...
             'cuttedIndices',[]...
             ),...
        'fitopt',struct(...
            'MaxIter',[],...
            'MaxFunEval',[],...
            'TolFun',[] ...
           ) ...
        ), ...
    'remarks',struct(...
        'purpose','' ...
        ), ...
    'format',struct(...
        'name','TSim module', ...
        'version','0.6' ...
        ) ...
    );

dataStructure.TSim.remarks.comment = cell(0);


% Create trEPR toolbox data model (structure with field types as values)
dataModel = struct();
dataModel.calculated = 'ismatrix';
dataModel.TSim = struct(...
    'parameters','isstruct', ...        
    'sim',struct(...
        'Sys',struct(...
            'S','isscalar',...
            'g','isvector',...
            'D','isvector',...
            'lw','isvector',...
            'DStrain','isvector',...
            'gStrain','isvector'...
            ),...
        'Exp',struct(...
            'mwFreq','isscalar',...
            'Range','isvector',...
            'nPoints','isscalar',...
            'Temperature','isvector',...
            'Ordering','isscalar'...
            ),...
        'Opt',struct(...
            'nKnots','isvector',...
            'Harmonic','isscalar'...
            ),...
          'routine','isstring' ...
        ),...
    'fit',struct(...
        'fitpar',struct(...
        ),...
        'initialvalue','isvector',...
        'finalvalue','isvector',...  
        'lb','isvector',...
        'ub','isvector',...
        'fitcut',struct(...
             'cutpoints','ismatrix',...
             'mutilatedData','isvector',...
             'mutilatedField','isvector',...
             'cuttedIndices','isvector'...
             ),...
        'fitopt',struct(...
            'MaxIter','isscalar',...
            'TolFun','isscalar',...
            'MaxFunEval','isscalar'...
           ),...
        'routine','isstring' ...
        ), ...
    'remarks',struct(...
        'purpose','ischar',...
        'comment','iscell' ...
        ),...
    'format',struct(...
        'name','ischar', ...
        'version','ischar' ...
        ) ...
    );


if nargin && ischar(varargin{1})
    switch lower(varargin{1})
        case 'structure'
            if nargout
                varargout{1} = dataStructure;
            end
        case 'model'
            if nargout
                varargout{1} = dataModel;
            end
        case 'check'
            if nargin < 2
                fprintf('No structure to check...\n');
                return;
            end
            if ~isstruct(varargin{2})
                fprintf('%s has wrong type',inputname(2));
                return;
            end
            
            [missingFields,wrongType] = ...
                checkStructure(dataModel,varargin{2},inputname(2));

            if ~isempty(missingFields)
                fprintf('There are missing fields:\n');
                for k=1:length(missingFields)
                    fprintf('  %s\n',char(missingFields{k}));
                end
            end
            if ~isempty(wrongType)
                fprintf('There are fields with wrong type:\n');
                for k=1:length(wrongType)
                    fprintf('  %s\n',char(wrongType{k}));
                end
            end
            if isempty(missingFields) && isempty(wrongType)
                fprintf('Basic test passed! Structure seems fine...\n');
            end
            
            varargout{1} = missingFields;
            varargout{2} = wrongType;
            
        otherwise
            fprintf('Command ''%s'' unknown\n',varargin{1});
            return;
    end
else
    if nargout
        varargout{1} = dataStructure;
    end
end

end

function [missingFields,wrongType] = checkStructure(model,structure,name)
missingFields = cell(0);
wrongType = cell(0);
    function traverse(model,structure,parent)
        modelFieldNames = fieldnames(model);
        for k=1:length(modelFieldNames)
            if ~isfield(structure,modelFieldNames{k})
                missingFields{end+1} = ...
                    sprintf('%s.%s',parent,modelFieldNames{k}); %#ok<AGROW>
            else
                if isstruct(model.(modelFieldNames{k}))
                    if ~isstruct(structure.(modelFieldNames{k}))
                        wrongType{end+1} = ...
                            sprintf('%s.%s',parent,modelFieldNames{k}); %#ok<AGROW>
                    end
                    traverse(...
                        model.(modelFieldNames{k}),...
                        structure.(modelFieldNames{k}),...
                        [parent '.' modelFieldNames{k}]...
                        );
                else
                    functionHandle = str2func(model.(modelFieldNames{k}));
                    if ~functionHandle(structure.(modelFieldNames{k}))
                        if strcmp(model.(modelFieldNames{k}),'isscalar') || ...
                                strcmp(model.(modelFieldNames{k}),'isvector')
                            if isnumeric(structure.(modelFieldNames{k})) && ...
                                    isempty(structure.(modelFieldNames{k}))
                                return;
                            end
                        end
                        wrongType{end+1} = ...
                            sprintf('%s.%s',parent,modelFieldNames{k}); %#ok<AGROW>
                    end
                end
            end
        end
    end
traverse(model,structure,name);
end
